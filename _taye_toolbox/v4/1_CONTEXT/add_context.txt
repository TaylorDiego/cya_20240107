{
    "MANUAL_TITLE": "https://pylint.readthedocs.io/en/latest/user_guide/messages/convention/invalid-name.html",
    "DateTime": "2023-12-15 19:08:37",
    "URL": "https://pylint.readthedocs.io/en/latest/user_guide/messages/convention/invalid-name.html",
    "Keywords": "missing",
    "Title": "invalid-name _ C0103 - Pylint 3.1.0-dev0 documentation",
    "Author": "missing",
    "Text": "User Guide Developer Guide Additional tools Changelog Support Message emitted: %s name \"%s\" doesn't conform to %s Description: Used when the name doesn't conform to naming rules associated to its type (constant, variable, class...). Problematic code: Correct code: Additional details: Pylint recognizes a number of different name types internally. With a few\nexceptions, the type of the name is governed by the location the assignment to a\nname is found in, and not the type of object assigned. Name Type Description module Module and package names, same as the file names. const Module-level constants, any variable defined at module level that is not bound to a class object. class class function Functions, toplevel or nested in functions or methods. method Methods, functions defined in class bodies. Includes static and class methods. attr Attributes created on class instances inside methods. argument Arguments to any function type, including lambdas. variable Local variables in function scopes. class-attribute Attributes defined in class bodies. class-const ClassVar inlinevar Loop variables in list comprehensions and generator expressions. typevar TypeVar typealias TypeAlias Union PEP8 Pylint provides set of predefined naming styles. Those predefined\nnaming styles may be used to adjust Pylint configuration to coding\nstyle used in linted project. Following predefined naming styles are available: snake_case camelCase PascalCase UPPER_CASE any Following options are exposed: Pylint provides predefined naming patterns for some names. These patterns are often\nbased on a Naming Style but there is no option to choose one of the styles mentioned above.\nThe pattern can be overwritten with the options discussed below. The following types of names are checked with a predefined pattern: Name type Good names Bad names typevar T _CallableT _T_co AnyStr DeviceTypeT IPAddressT DICT_T CALLABLE_T ENUM_T DeviceType _StrType typealias GoodName2 T Type typevars TopName TTopName _1BadName disallowed-name invalid-name bad-names-rgxs=\"^..?$\" *-naming-style invalid-name Large code bases that have been worked on for multiple years often exhibit an\nevolution in style as well. In some cases, modules can be in the same package,\nbut still have different naming style based on the stratum they belong to.\nHowever, intra-module consistency should still be required, to make changes\ninside a single file easier. For this case, Pylint supports regular expression\nwith several named capturing group. Rather than emitting name warnings immediately, Pylint will determine the\nprevalent naming style inside each module and enforce it on all names. Consider the following (simplified) example: snake camel sample.py snake invalid-name exempt ignore Default value: empty Format: comma-separated groups of colon-separated names. function:method Default: off invalid-name basic",
    "Lists": [],
    "MANUAL_TEXT": "https://pylint.readthedocs.io/en/latest/user_guide/messages/convention/invalid-name.html\n"
}