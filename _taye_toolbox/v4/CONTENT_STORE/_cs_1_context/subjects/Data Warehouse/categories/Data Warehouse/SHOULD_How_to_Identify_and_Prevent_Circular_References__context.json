{
    "DateTime": "2023-12-27 14:41:25",
    "URL": "https://support.timextender.com/data-warehouse-108/how-to-identify-and-prevent-circular-references-1587",
    "Keywords": "missing",
    "Title": "How to Identify and Prevent Circular References _ Community",
    "Author": "Greg Lennox",
    "Text": "Table relations and lookups may comprise the backbone or infrastructure of the data model, and as such they need to be created with care andthoughtfulness, keeping in mind that theyare the pathways along which the data will flow. Lookups that create circular references are one of the issues that mayarise asdata models become more complex.By definition, a circular reference is an instance where a field is somehow looking back to itself when attempting to populate itsvalue. The following daisy chain of three fields that uselookup transformations is an example of a circular reference condition. When attempting to a execute a table, newer versions of TimeXtender maybe able to detect the circular referenceand display an error similar to the following.  The above circular referenceexample is straightforward and easy to spot. However, this may be more challenging in a complex data warehouse. A circular reference may more likely to occurforlookups created between dimension tables. A goodpractice to avoid this is to only createlookups on one side of the relation betweentwotables. Otherwise, if both tables have lookups that are pointing back to the other table,then the data cleansing process for each table maybe waiting on the other table to complete before starting the data cleansing process for itself. Daisy chained lookups that result in acircular references are commonly found inlookups thatare using multiple related tables. Views Table Inserts Raw Table Valid Raw Table  When this is applied, the field only exists in the raw table and not in the valid table. Previewing the valid table will show this field as empty. Use Raw Values Execute Tables     ",
    "Lists": []
}