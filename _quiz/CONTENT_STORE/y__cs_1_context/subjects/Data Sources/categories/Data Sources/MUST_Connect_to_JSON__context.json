{
    "DateTime": "2023-12-27 14:42:21",
    "URL": "https://support.timextender.com/data-sources-112/connect-to-json-785",
    "Keywords": "missing",
    "Title": "Connect to JSON _ Community",
    "Author": "Thomas Lind",
    "Text": "Go through this guide before you start. Add a CData data source This data source can connect to JSON data in files or in an API. It can be used almost interchangeably with the REST provider. So what REST can do, this can as well. The only difference is that this is JSON data exclusively. Pagination Parameters JSONP http://mysafeinfo.com/api/data?list=top100rocksongs_billboard_2013&format=json&abbreviate=false&case=default It contains the Top 100 Rock Songs (Billboard, 2013). The setup is as follows. The first step in setting up a CData connector should always be to check the online documentation. JSON guide from CData If it is on a online resource location you need to fill out the following fields. URI:http://mysafeinfo.com/api/data?list=top100rocksongs_billboard_2013&format=json&abbreviate=false&case=default You need to paste in the link to the JSON resource location. JSON Path: <empty> JsonPath Here is a setup of this. RAW data URI: <path to file> Add the path to the file in the data source field. JSON Path: <empty> The same as before. Once the data source is added, it can be used like all other data sources.You can set up incremental load, make data type overwrites, data selection rules and use the Query Table tool. Row Scan Depth 0 0 If your file is containing nested objects, you have the opportunity of seeing this. I used the Service.json file I downloaded earlier. It has this structure. When I pull it in with the default setup, as shown previously. It gives me one table called people. When previewed, each nested part is put into one field. Data Model  This will give you some more configuration options. JSON This is the default format and should be used in the majority of cases. JSONRows This is a specific format in which data is returned in a relational format consisting of rows of data contained within primitive arrays. Column information is returned as well in a separate array. Data Model JSONFormat Example: 1 JSONPath  column row JSONPath column:$.dataset.column_names;row:$.dataset.data columnname Example: 2 JSONPath column:$.columns;columnname:$.columns.name;row:$.rows LDJSON (Line-Delimited JSON) line-delimited JSON NDJSON  JSONLines Example LDJSON File: JSONPath $. JSONPath $. LDJSON These can be used for this and will be needed when doing stuff like authentication. We have a area under data sources with questions about this. RSD File Customization ",
    "Lists": [
        {
            "heading": "Parsing Hierarchical Data",
            "paragraphs": [
                "If your file is containing nested objects, you have the opportunity of seeing this. I used the Service.json file I downloaded earlier. It has this structure.",
                "When I pull it in with the default setup, as shown previously. It gives me one table called people. When previewed, each nested part is put into one field.",
                "To avoid that use the Data Model feature."
            ],
            "list": [
                "Document: As default it is set to Document which is the top level data. The other two options besides that are Flatten Documents and Relational.",
                "Relational: Creates a table for each nested part and creates ids to relate them to each other. Like this.  People now looks like this.  The only issue is that it has a limit regarding how deep in the object it can go. If so you will have to use the JSON Path field to start at a lower level, or generate a RSD file where you can manually add the path to the level the data is on.",
                "Flatten Documents: makes all these previous tables one large one. Like this."
            ]
        },
        {
            "heading": "Using the JSON Format field",
            "paragraphs": [
                "This will give you some more configuration options."
            ],
            "list": [
                "JSON This is the default format and should be used in the majority of cases.",
                "JSONRows This is a specific format in which data is returned in a relational format consisting of rows of data contained within primitive arrays. Column information is returned as well in a separate array. Note: Data Model does not apply when using this JSONFormat. Example: 1 {  \"dataset\": {    \"column_names\": [      \"Name\",      \"Age\",      \"Gender\"    ],    \"data\": [      [        \"John Doe\",        37,        \"M\"      ],      [        \"David Thomas\",        25,        \"M\"      ]    ]  }} The JSONPath property requires special syntax to identify the column and row paths. The syntax consists of specifying a path for each using a \"column:\" and \"row:\" prefix. Using the example above, the JSONPath would be set to: column:$.dataset.column_names;row:$.dataset.data In the case that columns are returned in an object with additional data, an additional \"columnname:\" prefix can be specified to identify the path to the value containing the column name. Example: 2 {  \"columns\": [    {      \"name\":\"first_name\",      \"type\":\"text\"    },    {      \"name\":\"last_name\",      \"type\":\"text\"    }  ],  \"rows\": [    [      \"John\",      \"Doe\"    ],    [      \"David\",      \"Thomas\"    ]  ]} In the above example, JSONPath would be set to: column:$.columns;columnname:$.columns.name;row:$.rows",
                "LDJSON (Line-Delimited JSON) This format is used to parse line-delimited JSON files (also known as NDJSON or JSONLines). Line-delimited JSON files contain a separate JSON document on each line. Example LDJSON File: { \"Name\": \"John Doe\", \"Age\": 37, \"Gender\": \"M\" }{ \"Name\": \"David Thomas\", \"Age\": 25, \"Gender\": \"M\" }{ \"Name\": \"Susan Price\", \"Age\": 35, \"Gender\": \"F\" } The JSONPath value is treated the same as when using the regular JSON format. The only difference is that the root path ($.) is always used (therefore treating all the lines of JSON as it is contained within an array). In the above example, the JSONPath will be \"$.\", which will return 3 rows containing the columns: Name, Age, and Gender."
            ]
        }
    ]
}