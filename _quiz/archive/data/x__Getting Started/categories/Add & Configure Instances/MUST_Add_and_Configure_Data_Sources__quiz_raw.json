{    "question_1": {        "question": "What is the purpose of cloning a data source connection in TimeXtender Desktop?",        "options": {            "option_a": "To delete the original data source connection",            "option_b": "To create a backup of the TimeXtender Portal",            "option_c": "To duplicate a heavily customized data source connection",            "option_d": "To transfer data directly to the data warehouse"        },        "answer": "option_c",        "explanation": "Cloning a data source connection in TimeXtender Desktop is useful for creating copies of data source connections that are heavily customized, facilitating the management of complex configurations."    },    "question_2": {        "question": "How does the ODX Server handle incremental data loads?",        "options": {            "option_a": "By transferring all rows of data from a table",            "option_b": "By defining rules for when incremental load should be applied",            "option_c": "By cloning the data source connection",            "option_d": "By using a SQL query to create a new table"        },        "answer": "option_b",        "explanation": "The ODX Server can load data incrementally by defining rules for when incremental load should or should not be applied, allowing for quick updates with minimal load on the data source."    },    "question_3": {        "question": "What is required to manage updated and deleted records during incremental loads in an ODX instance?",        "options": {            "option_a": "A rule-based interface for defining primary keys",            "option_b": "A complete backup of the data source",            "option_c": "A SQL query for each table",            "option_d": "A manual selection of each table"        },        "answer": "option_a",        "explanation": "To handle updated and deleted records on incremental load, the ODX server needs to know the primary key on each table, which is set up through a rule-based interface."    },    "question_4": {        "question": "What is the function of the 'Filter Rows' feature in TimeXtender?",        "options": {            "option_a": "To add new rows to a table",            "option_b": "To define criteria for including rows in a data transfer",            "option_c": "To clone the data source connection",            "option_d": "To set up primary keys for a data source"        },        "answer": "option_b",        "explanation": "The 'Filter Rows' feature allows users to add a row filter rule that defines the criteria a row must meet to be included in a data transfer, such as an ID over a specific number or a timestamp later than a specific date."    },    "question_5": {        "question": "What is the purpose of the 'Query Tables' feature in TimeXtender's ODX?",        "options": {            "option_a": "To delete tables from the data source",            "option_b": "To back up the entire ODX instance",            "option_c": "To create a table from a SQL query when regular extraction is not possible",            "option_d": "To automatically generate primary keys for tables"        },        "answer": "option_c",        "explanation": "The 'Query Tables' feature allows users to enter a SQL query that the ODX will turn into a table, which is particularly useful when a table cannot be extracted from the data source by the regular ODX logic."    },    "question_6": {        "question": "How can you preview the data in a table using TimeXtender's Query Tool?",        "options": {            "option_a": "By cloning the data source",            "option_b": "By executing a SELECT statement in the Query Tool",            "option_c": "By setting up primary keys",            "option_d": "By transferring all rows of data from the table"        },        "answer": "option_b",        "explanation": "To preview the data in a table, you can use the Query Tool in TimeXtender to execute a SELECT statement, which allows you to see the data stored in the data source."    }}